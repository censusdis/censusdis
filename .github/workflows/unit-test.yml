# Run unit tests every time a branch is pushed. This is the simplest
# version of unit testing, just on a single platform.
#
# See also:
#    test-matrix.yml: run on all platforms for each pull request
#    coverage-report.yml: runs on merge to main to generate coverage reports

name: unit-test

on:
  push:
    branches-ignore:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # List the tests
  list-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.test-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: test-matrix
        run: echo "matrix=$(find tests -name "*.py" | sed -e s/^tests\\/// | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  unit-test:
    needs: list-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJson(needs.list-tests.outputs.matrix) }}
      fail-fast: false
    steps:
      #----------------------------------------------
      #       check out repo
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ssh-key:
            ${{secrets.DEPLOY_ACTION_SECRET}}
      #----------------------------------------------
      #       set up python
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              log the version
      #----------------------------------------------
      - name: Log version
        id: logVersions
        run: |
          source .venv/bin/activate
          python -c "import censusdis; print(f'censusdis version: {censusdis.version}')"
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        id: runTests
        run: |
          source .venv/bin/activate
          echo "${{matrix.test}}"
          python -m pytest "tests/${{matrix.test}}"
      #----------------------------------------------
      #              archive test artifacts
      #----------------------------------------------
      - name: Archive test artifacts
        if: ${{ hashFiles('tests/_test_artifacts') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts-${{ matrix.test }}
          path: tests/_test_artifacts
          retention-days: 7
